install.packages("devtools")
devtolls::install_github("rstudio/shinyapps")
library(devtools)
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='gsilvapt', token='91500EE040A405FA3BC617E054662AD5', secret='EMpUmM5bWUVhGv+/zCc9llPDUtMoGhWFQK+WywE9')
?plot.table
library(jsonlite)
drazisil <- fromJSON("http://mc.drazisil.com:3000/stats.json")
drazisil$last_updated
setwd("~/Documents/dashboard-zero/data")
comments <- read.table("comments.csv", header = TRUE, sep =",", row.names = NULL)
issues <- read.csv("issues.csv", header = TRUE, sep =",", row.names = NULL)
labels <- read.csv("labels.csv", header = TRUE, sep =",", row.names = NULL)
members <- read.csv("members.csv", header = TRUE, sep =",", row.names = NULL)
milestones <- read.csv("milestones.csv", header = TRUE, sep =",", row.names = NULL)
repos <- read.table("repos.csv", header = TRUE, sep =",", row.names = NULL)
View(members)
View(milestones)
View(members)
View(comments)
View(issues)
View(labels)
View(members)
View(milestones)
View(repos)
?row.names
issues <- read.csv("issues.csv", header = TRUE, sep =",")
View(issues)
View(issues)
setwd("~/Documents/dashboard-zero/data")
comments <- read.table("comments.csv", header = TRUE, sep =",", row.names = NULL)
issues <- read.csv("issues.csv", header = TRUE, sep =",", row.names = NULL)
labels <- read.csv("labels.csv", header = TRUE, sep =",", row.names = NULL)
members <- read.csv("members.csv", header = TRUE, sep =",", row.names = NULL)
milestones <- read.csv("milestones.csv", header = TRUE, sep =",", row.names = NULL)
repos <- read.table("repos.csv", header = TRUE, sep =",", row.names = NULL)
View(issues)
setwd("~/Documents/dashboard-zero/data")
comments <- read.table("comments.csv", header = TRUE, sep =",", row.names = NULL)
issues <- read.csv("issues.csv", header = TRUE, sep =",", row.names = NULL)
labels <- read.csv("labels.csv", header = TRUE, sep =",", row.names = NULL)
members <- read.csv("members.csv", header = TRUE, sep =",", row.names = NULL)
milestones <- read.csv("milestones.csv", header = TRUE, sep =",", row.names = NULL)
repos <- read.table("repos.csv", header = TRUE, sep =",", row.names = NULL)
comments <- read.table("comments.csv", header = TRUE, sep =",")
comments <- read.csv("comments.csv", header = TRUE, sep =",")
View(comments)
comments <- read.csv("comments.csv", header = TRUE, sep =",")
issues <- read.csv("issues.csv", header = TRUE, sep =",", row.names = NULL)
labels <- read.csv("labels.csv", header = TRUE, sep =",", row.names = NULL)
members <- read.csv("members.csv", header = TRUE, sep =",", row.names = NULL)
milestones <- read.csv("milestones.csv", header = TRUE, sep =",", row.names = NULL)
repos <- read.csv("repos.csv", header = TRUE, sep =",")
View(issues)
View(members)
View(comments)
View(issues)
View(labels)
View(members)
View(milestones)
View(repos)
#
## The second part of the program will crunch the numbers from the data sources.
## sources
setwd("~/Documents/dashboard-zero/data")
comments <- read.csv("comments.csv", header = TRUE, sep =",")
issues <- read.csv("issues.csv", header = TRUE, sep =",", row.names = NULL)
labels <- read.csv("labels.csv", header = TRUE, sep =",", row.names = NULL)
members <- read.csv("members.csv", header = TRUE, sep =",", row.names = NULL)
milestones <- read.csv("milestones.csv", header = TRUE, sep =",", row.names = NULL)
#repos <- read.csv("repos.csv", header = TRUE, sep =",")
## Treat every data format
comments$updated_date <- as.Date(comments$updated_date)
issues$created_date <- as.Date(issues$created_date)
issues$updated_date <- as.Date(issues$updated_date)
milestones$due_on <- as.Date(milestones$due_on)
library(jsonlite)
fromJSON(issues$url)
fromJSON("issues$url")
fromJSON("https://api.github.com/repos/mozilla/login.webmaker.org/issues/370")
library(jsonlite)
projects <- fromJSON("https://api.github.com/repos/mozilla/login.webmaker.org/issues/370")
apis <- issues$url
apiData <- fromJSON(apis)
apis <- as.data.frame(issues$url)
View(apis)
apiData <- fromJSON(apis)
apiData <- fromJSON("apis")
apis <- as.file(issues$url)
apis <- as.data.frame(issues$url)
write.csv(apis, "apis.csv", header = TRUE)
write.csv(apis, "apis.csv", sep =",")
apiData <- fromJSON("apis.csv")
apiData <- fromJSON(apis.csv)
write.csv(apis, "apis.csv", sep =",")
apiData <- fromJSON(apis.csv)
<- fromJSON("https://api.github.com/repos/mozilla/login.webmaker.org/issues/370")
json_file <- issues$url
apis <- fromJSON(sprintf("[%s]", paste(readLines(json_file), collapse=",")))
class(issues$url)
issues$url <- as.character(issues$url)
json_file <- issues$url
apis <- fromJSON(json_file)
shiny::tags
library(shinyapps)
shiny::tags
library(shiny)
library(shinyapps)
---
title: "dashboard-zero"
author: "gsilvapt"
date: "December 13, 2015"
output: html_document
runtime: shiny
---
```{r, echo=FALSE}
library(shinyapps)
shinyapps::deployApp("~/Documents/dashboard-zero/dash-zero-shiny")
```
```{r, echo=FALSE}
source("source_from_repo.R")
### MAIN TABLE ###
### Number of unanswered inputs from volunteers in GitHub ||
### PULLS without answer at all ||
### PULL from volunteers with no activity for the last 7 days ||
### Number of open bugs |||
### Number of bugs needing triage |||
### Number of bugs by triage status |||
### Number of bugs assigned to expired Milestones |||
## pre-code for determine given variables
# For each of the above inputs
no_uiv <- sum(comments$creator != members$id && issues$comments_count)
p_noans <- sum(issues$is_pullrequest == "true" && issues$comments_count == 0)
p_noact <- sum(issues$is_pullrequest == "true" && issues$updated_date-7 == 0)
numb_bugs <- sum(repos$open_issues)
library(jsonlite)
#num_bugs_triage <- sum(fromJSON("issues$url") != "labels")
#num_bugs_exp_mil <- sum(fromJSON("issues$issue_URL")
```
```{r}
```{r}
plot.table(no_uiv, p_noans, p_noact, numb_bugs)
```
?draw.table
??draw.table
install.packages(ggplot)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ReporteRs")
table <- no_uiv && p_noans && p_noact && numb_bugs
write.table(no_uiv && p_noans && p_noact && numb_bugs, file = "dash")
dash <- c(no_uiv, p_noans, p_noact, numb_bugs)
```{r, results="asis", warning = FALSE, message = FALSE}
library(ReporteRs)
data(dash)
no_uivFT = FlexTable( dash )
vars <- c("Number of unanswered volunteer input in Github issues", "Number of Pull Requests that have had no response at all", "Number of Pull Requests that have had no activity for more than X days", "Number of open bugs (total)", "Number of bugs needing triage", "Number of bugs by triage status", "Number of bugs assigned to expired Milestones")
for i in vars {
no_uivFT[, 1] == 0, i] = cellProprieties (background.color = "#3ADF00")
no_uivFT[, 1] >0 && <10, i] = cellProprieties (background.color = "#F78181")
no_uivFT[, 1] >10 && <20, i] = cellProprieties (background.color = "FA5858")
no_uivFT[, 1] >20, i] = cellProprieties (background.color = "#FF0000")
}
cat(as.html(no_uivFT))
library(ReporteRs)
library("ReporteRs")
install.packages("ReporteRs")
install.packages("rJava")
library(boot)
library(dplyr)
install.packages("dplyr")
```{r, results="asis", warning = FALSE, message = FALSE}
library(boot)
library(dplyr)
data(dash)
no_uivFT = FlexTable(data = dash, header.text.props = textBold("Dashboard Zero"))
myCellsProps <- cellProperties (padding =5)
no_uivFT[ dash$n == 0] = chprop(myCellsProps, background.color = "#3ADF00")
no_uivFT[ dash$n > 0 && dash&n <10] = chprop(myCellsProps, background.color = "#F78181")
no_uivFT[ dash$n > 10 && dash$n < 20] = chprop(myCellsProps, background.color = "#FA5858")
no_uivFT[ dash$n > 20 ] = chprop(myCellsProps, background.color = "#FF0000")
dash <- c(no_uiv, p_noans, p_noact, numb_bugs)
dash <- c(no_uiv, p_noans, p_noact, numb_bugs)
dash <- as.data.frame(dash)
View(dash)
dash <- c(no_uiv, p_noans, p_noact, numb_bugs)
dash <- as.data.frame(dash, row.names = TRUE)
